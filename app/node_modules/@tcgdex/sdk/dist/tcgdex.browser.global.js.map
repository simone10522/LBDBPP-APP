{"version":3,"sources":["../src/tcgdex.browser.ts","../node_modules/@dzeio/object-util/dist/ObjectUtil.mjs","../node_modules/@cachex/core/dist/index.mjs","../node_modules/@cachex/memory/dist/index.mjs","../node_modules/@cachex/web-storage/dist/index.mjs","../src/models/Model.ts","../src/endpoints/Endpoint.ts","../src/endpoints/SimpleEndpoint.ts","../src/models/CardResume.ts","../src/models/Card.ts","../src/models/SerieResume.ts","../src/models/SetResume.ts","../src/models/Serie.ts","../src/models/Set.ts","../src/models/StringEndpoint.ts","../src/utils.ts","../src/version.js","../src/tcgdex.ts"],"sourcesContent":["import TCGdex from './tcgdex'\n\nTCGdex.fetch = window.fetch\n\nexport default TCGdex\n","// src/ObjectUtil.ts\nfunction objectMap(obj, fn) {\n  mustBeObject(obj);\n  const list = [];\n  objectLoop(obj, (item, key, index) => {\n    list.push(fn(item, key, index));\n  });\n  return list;\n}\nfunction objectRemap(obj, fn, options) {\n  mustBeObject(obj);\n  const clone = {};\n  objectLoop(obj, (item, oldKey, index) => {\n    const { key, value } = fn(item, oldKey, index);\n    if ((options == null ? void 0 : options.strict) && key in clone) {\n      throw new Error(\"objectRemap strict mode active, you can't remap the same key twice\");\n    }\n    clone[key] = value;\n  });\n  return clone;\n}\nfunction objectLoop(obj, fn) {\n  mustBeObject(obj);\n  const keys = objectKeys(obj);\n  for (let index = 0; index < keys.length; index++) {\n    const key = keys[index];\n    const stop = fn(obj[key], key, index);\n    if (stop === false) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction objectValues(obj) {\n  mustBeObject(obj);\n  return Object.values(obj);\n}\nfunction objectToArray(obj) {\n  mustBeObject(obj);\n  return objectValues(obj);\n}\nfunction objectKeys(obj) {\n  mustBeObject(obj);\n  if (Array.isArray(obj)) {\n    return Array.from(obj.keys());\n  }\n  return Object.keys(obj);\n}\nfunction objectSize(obj) {\n  return objectKeys(obj).length;\n}\nfunction objectSort(obj, fn) {\n  mustBeObject(obj);\n  const ordered = {};\n  let sortedKeys = [];\n  if (Array.isArray(fn)) {\n    sortedKeys = fn.concat(objectKeys(obj).filter((key) => !fn.includes(key)));\n  } else {\n    sortedKeys = objectKeys(obj).sort(fn);\n  }\n  for (const key of sortedKeys) {\n    ordered[key] = obj[key];\n  }\n  return ordered;\n}\nfunction cloneObject(obj) {\n  return objectClone(obj);\n}\nfunction objectClone(obj, options) {\n  mustBeObject(obj);\n  if (Array.isArray(obj)) {\n    const arr = [];\n    for (const item of obj) {\n      arr.push(\n        isObject(item) ? objectClone(item) : item\n      );\n    }\n    return arr;\n  }\n  const clone = {};\n  objectLoop(obj, (value, key) => {\n    if (typeof value === \"object\" && value != null && (typeof (options == null ? void 0 : options.deep) === \"undefined\" || options.deep)) {\n      clone[key] = objectClone(value);\n      return;\n    }\n    clone[key] = value;\n  });\n  return clone;\n}\nfunction objectSet(obj, path, value) {\n  mustBeObject(obj);\n  let pointer = obj;\n  for (let index = 0; index < path.length; index++) {\n    const key = path[index];\n    const nextIndex = index + 1;\n    if (!Object.prototype.hasOwnProperty.call(pointer, key) && nextIndex < path.length) {\n      const key1 = path[nextIndex];\n      if (typeof key1 === \"number\") {\n        pointer[key] = [];\n      } else {\n        pointer[key] = {};\n      }\n    }\n    if (nextIndex === path.length) {\n      pointer[key] = value;\n      if (value === void 0) {\n        delete pointer[key];\n      }\n      break;\n    }\n    pointer = pointer[key];\n  }\n}\nfunction objectEqual(first, second) {\n  mustBeObject(first);\n  mustBeObject(second);\n  if (objectSize(first) !== objectSize(second)) {\n    return false;\n  }\n  const res = objectLoop(first, (item, key) => {\n    if (!(key in second) && key in first) {\n      return false;\n    }\n    const item2 = second[key];\n    if (item === null && item2 === null) {\n      return true;\n    }\n    if (typeof item === \"object\" && typeof item2 === \"object\") {\n      return objectEqual(item, item2);\n    }\n    return item === item2;\n  });\n  return res;\n}\nfunction objectClean(obj, options) {\n  mustBeObject(obj);\n  objectLoop(obj, (item, key) => {\n    if ((typeof (options == null ? void 0 : options.cleanUndefined) === \"undefined\" || options.cleanUndefined) && item === void 0) {\n      delete obj[key];\n    } else if ((options == null ? void 0 : options.cleanFalsy) && !obj[key]) {\n      delete obj[key];\n    } else if ((options == null ? void 0 : options.cleanNull) && item === null) {\n      delete obj[key];\n    }\n    if ((typeof (options == null ? void 0 : options.deep) === \"undefined\" || options.deep) && isObject(item)) {\n      objectClean(item, options);\n    }\n  });\n}\nfunction objectOmit(obj, ...keys) {\n  const cloned = objectClone(obj, { deep: false });\n  for (const key of keys) {\n    if (key in cloned) {\n      delete cloned[key];\n    }\n  }\n  return cloned;\n}\nfunction objectFind(obj, fn) {\n  mustBeObject(obj);\n  let res = void 0;\n  objectLoop(obj, (value, key, index) => {\n    const tmp = fn(value, key, index);\n    if (tmp) {\n      res = {\n        key,\n        value,\n        index\n      };\n    }\n    return !tmp;\n  });\n  return res;\n}\nfunction objectGet(obj, path) {\n  if (!path || path === \"\" || Array.isArray(path) && path.length === 0) {\n    return obj;\n  }\n  mustBeObject(obj);\n  if (typeof path === \"string\") {\n    path = path.split(\".\").map((it) => /^\\d+$/g.test(it) ? Number.parseInt(it) : it);\n  }\n  let pointer = obj;\n  for (let index = 0; index < path.length; index++) {\n    const key = path[index];\n    const nextIndex = index + 1;\n    if (typeof key === \"undefined\" || !Object.prototype.hasOwnProperty.call(pointer, key) && nextIndex < path.length) {\n      return void 0;\n    }\n    if (nextIndex === path.length) {\n      return pointer[key];\n    }\n    pointer = pointer[key];\n  }\n  throw new Error(`it should never get there ! (${JSON.stringify(obj)}, ${path}, ${JSON.stringify(pointer)})`);\n}\nfunction isObject(item) {\n  return typeof item === \"object\" && item !== null;\n}\nfunction mustBeObject(item) {\n  if (!isObject(item)) {\n    throw new Error(\"Input is not an object!\");\n  }\n  return true;\n}\nvar ObjectUtil_default = {\n  objectClean,\n  objectClone,\n  objectEqual,\n  objectFind,\n  objectGet,\n  objectKeys,\n  objectLoop,\n  objectMap,\n  objectOmit,\n  objectRemap,\n  objectSet,\n  objectSize,\n  objectSort,\n  // helpers\n  isObject,\n  mustBeObject,\n  // deprecated\n  objectToArray,\n  cloneObject\n};\nexport {\n  cloneObject,\n  ObjectUtil_default as default,\n  isObject,\n  mustBeObject,\n  objectClean,\n  objectClone,\n  objectEqual,\n  objectFind,\n  objectGet,\n  objectKeys,\n  objectLoop,\n  objectMap,\n  objectOmit,\n  objectRemap,\n  objectSet,\n  objectSize,\n  objectSort,\n  objectToArray,\n  objectValues\n};\n","// src/CacheAbstract.ts\nimport { objectLoop } from \"@dzeio/object-util\";\nvar CacheAsbract = class {\n  getMultiple(keys, defaultValues) {\n    const res = {};\n    for (let idx = 0; idx < keys.length; idx++) {\n      const key = keys[idx];\n      const value = this.get(key, defaultValues == null ? void 0 : defaultValues[idx]);\n      if (typeof value === \"undefined\") {\n        continue;\n      }\n      res[key] = value;\n    }\n    return res;\n  }\n  setMultiple(values, ttl) {\n    objectLoop(values, (v, k) => {\n      this.set(k, v, ttl);\n    });\n    return true;\n  }\n  deleteMultiple(keys) {\n    for (const key of keys) {\n      this.delete(key);\n    }\n    return true;\n  }\n};\nexport {\n  CacheAsbract\n};\n/*!\n * Library based on the awesome PHP Psr 16 SimpleCache\n *\n * CacheX is a simple, easy to use and meant to be replaceable Cache library for most usage\n */\n","// src/index.ts\nimport { CacheAsbract } from \"@cachex/core\";\nvar MemoryCache = class extends CacheAsbract {\n  constructor() {\n    super(...arguments);\n    this.cache = /* @__PURE__ */ new Map();\n  }\n  get(key, defaultValue) {\n    const item = this.cache.get(key);\n    if (!item) {\n      return defaultValue != null ? defaultValue : void 0;\n    }\n    if (item.expire && item.expire < (/* @__PURE__ */ new Date()).getTime()) {\n      this.delete(key);\n      return defaultValue != null ? defaultValue : void 0;\n    }\n    return item.data;\n  }\n  set(key, value, ttl) {\n    let expire;\n    if (ttl) {\n      expire = (/* @__PURE__ */ new Date()).getTime() + ttl * 1e3;\n    }\n    this.cache.set(key, {\n      data: value,\n      expire\n    });\n    return true;\n  }\n  delete(key) {\n    this.cache.delete(key);\n    return true;\n  }\n  clear() {\n    this.cache.clear();\n    return true;\n  }\n  has(key) {\n    return this.cache.has(key);\n  }\n};\nexport {\n  MemoryCache as default\n};\n","// src/index.ts\nimport { CacheAsbract } from \"@cachex/core\";\nvar BrowserStorageCache = class extends CacheAsbract {\n  constructor(prefix, session = false) {\n    super();\n    this.prefix = prefix;\n    try {\n      window;\n    } catch {\n      throw new Error('The current context is not in a browser or the variable \"window\" is not available.');\n    }\n    if (session) {\n      this.storage = window.sessionStorage;\n    } else {\n      this.storage = window.localStorage;\n    }\n    if (!this.storage) {\n      throw new Error(\"window.localStorage or window.sessionStorage are unavailable.\");\n    }\n  }\n  get(key, defaultValue) {\n    const raw = this.storage.getItem(this.getFinalKey(key));\n    if (!raw) {\n      return defaultValue != null ? defaultValue : void 0;\n    }\n    const item = JSON.parse(raw);\n    if (item.expire && item.expire < (/* @__PURE__ */ new Date()).getTime()) {\n      this.delete(key);\n      return defaultValue != null ? defaultValue : void 0;\n    }\n    return item.data;\n  }\n  set(key, value, ttl) {\n    let expire = void 0;\n    if (ttl) {\n      expire = (/* @__PURE__ */ new Date()).getTime() + ttl * 1e3;\n    }\n    const data = {\n      data: value,\n      expire\n    };\n    this.storage.setItem(this.getFinalKey(key), JSON.stringify(data));\n    return true;\n  }\n  delete(key) {\n    this.storage.removeItem(this.getFinalKey(key));\n    return true;\n  }\n  clear() {\n    const keys = this.keys();\n    return this.deleteMultiple(keys);\n  }\n  has(key) {\n    return !!this.storage.getItem(this.getFinalKey(key));\n  }\n  /**\n  * get the list of keys that are in the context of this cache component\n  */\n  keys() {\n    const list = [];\n    for (let idx = 0; idx < this.storage.length; idx++) {\n      const key = this.storage.key(idx);\n      if (typeof key !== \"string\" || this.prefix && !(key == null ? void 0 : key.startsWith(`@${this.prefix}/`))) {\n        continue;\n      }\n      list.push(key);\n    }\n    return list;\n  }\n  /**\n  * retrieve the prefixed key from the original\n  * @param key the original key without prefix\n  * @returns the new key with the prefix if set\n  */\n  getFinalKey(key) {\n    if (!this.prefix) {\n      return key;\n    }\n    return `@${this.prefix}/${key}`;\n  }\n};\nexport {\n  BrowserStorageCache as default\n};\n","import { objectLoop } from '@dzeio/object-util'\nimport type TCGdex from '../tcgdex'\n\nexport default abstract class Model {\n\n\tpublic constructor(\n\t\tprotected readonly sdk: TCGdex\n\t) { }\n\n\t/**\n\t * build a model depending on the data given\n\t * @param model the model to build\n\t * @param data the data to fill it with\n\t */\n\tpublic static build<T extends Model>(model: T, data?: object): T {\n\t\tif (!data) {\n\t\t\tthrow new Error('data is necessary.')\n\t\t}\n\t\tmodel.fill(data)\n\t\treturn model\n\t}\n\n\tprotected fill(obj: object) {\n\t\tobjectLoop(obj, (value, key) => {\n\t\t\t(this as object)[key] = value\n\t\t})\n\t}\n}\n","import type { Endpoints } from '../interfaces'\nimport Model from '../models/Model'\nimport type Query from '../Query'\nimport type TCGdex from '../tcgdex'\n\nexport default class Endpoint<Item extends Model, List extends Model> {\n\tpublic constructor(\n\t\tprotected readonly tcgdex: TCGdex,\n\t\tprotected readonly itemModel: new (sdk: TCGdex) => Item,\n\t\tprotected readonly listModel: new (sdk: TCGdex) => List,\n\t\tprotected readonly endpoint: Endpoints\n\t) { }\n\n\tpublic async get(id: string | number): Promise<Item | null> {\n\t\tconst res = await this.tcgdex.fetch(this.endpoint as 'cards', id as string)\n\t\tif (!res) {\n\t\t\treturn null\n\t\t}\n\t\treturn Model.build(new this.itemModel(this.tcgdex), res)\n\t}\n\n\tpublic async list(query?: Query): Promise<Array<List>> {\n\t\tconst res = await this.tcgdex.fetchWithQuery([this.endpoint], query?.params)\n\t\treturn (res as Array<object> ?? []).map((it) => Model.build(new this.listModel(this.tcgdex), it))\n\t}\n}\n","import type { Endpoints } from '../interfaces'\nimport Model from '../models/Model'\nimport type Query from '../Query'\nimport type TCGdex from '../tcgdex'\n\nexport default class SimpleEndpoint<Item extends Model, List extends string | number> {\n\tpublic constructor(\n\t\tprotected readonly tcgdex: TCGdex,\n\t\tprotected readonly itemModel: new (sdk: TCGdex) => Item,\n\t\tprotected readonly endpoint: Endpoints\n\t) {}\n\n\tpublic async get(id: string | number): Promise<Item | null> {\n\t\tconst res = await this.tcgdex.fetch(this.endpoint as 'cards', id as string)\n\t\tif (!res) {\n\t\t\treturn null\n\t\t}\n\t\treturn Model.build(new this.itemModel(this.tcgdex), res)\n\t}\n\n\tpublic async list(query?: Query): Promise<Array<List>> {\n\t\treturn await this.tcgdex.fetchWithQuery([this.endpoint], query?.params) ?? []\n\t}\n}\n","import type { Extension, Quality } from '../interfaces'\nimport type Card from './Card'\nimport Model from './Model'\n\nexport default class CardResume extends Model {\n\t/**\n\t * Globally unique card ID based on the set ID and the cards ID within the set\n\t */\n\tpublic id!: string\n\n\t/**\n\t * Card image url without the extension and quality\n\t *\n\t * @see {@link getImageURL}\n\t */\n\tpublic image?: string\n\n\t/**\n\t * ID indexing this card within its set, usually just its number\n\t */\n\tpublic localId!: string\n\n\t/**\n\t * Card Name (Including the suffix if next to card name)\n\t */\n\tpublic name!: string\n\n\t/**\n\t * the the Card Image full URL\n\t *\n\t * @param {Quality} quality the quality you want your image to be in\n\t * @param {Extension} extension extension you want you image to be\n\t * @return the full card URL\n\t */\n\tpublic getImageURL(quality: Quality = 'high', extension: Extension = 'png'): string {\n\t\treturn `${this.image}/${quality}.${extension}`\n\t}\n\n\t/**\n\t * Get the full Card\n\t *\n\t * @return the full card if available\n\t */\n\tpublic async getCard(): Promise<Card> {\n\t\treturn (await this.sdk.card.get(this.id))!\n\t}\n}\n","import CardResume from './CardResume'\nimport type { Variants } from './Other'\nimport type TCGdexSet from './Set'\nimport type SetResume from './SetResume'\n\n// TODO: sort elements by alphabetical order\nexport default class Card extends CardResume {\n\t/**\n\t * Card illustrator\n\t */\n\tpublic illustrator?: string\n\n\t/**\n\t * Card Rarity\n\t *\n\t * - None https://www.tcgdex.net/database/sm/smp/SM01\n\t * - Common https://www.tcgdex.net/database/xy/xy9/1\n\t * - Uncommon https://www.tcgdex.net/database/xy/xy9/2\n\t * - Rare https://www.tcgdex.net/database/xy/xy9/3\n\t * - Ultra Rare\n\t * - Secret Rare\n\t */\n\tpublic rarity!: string\n\n\t/**\n\t * Card Category\n\t *\n\t * - Pokemon\n\t * - Trainer\n\t * - Energy\n\t */\n\tpublic category!: string\n\n\t/**\n\t * Card Variants (Override Set Variants)\n\t */\n\tpublic variants?: Variants\n\n\t/**\n\t * Card Set\n\t */\n\tpublic set!: SetResume\n\n\t/**\n\t * Pokemon only elements\n\t */\n\n\t/**\n\t * Pokemon Pokedex ID\n\t */\n\tpublic dexId?: Array<number>\n\n\t/**\n\t * Pokemon HP\n\t */\n\tpublic hp?: number\n\n\t/**\n\t * Pokemon Types\n\t * ex for multiple https://www.tcgdex.net/database/ex/ex13/17\n\t */\n\tpublic types?: Array<string>\n\n\t/**\n\t * Pokemon Sub Evolution\n\t */\n\tpublic evolveFrom?: string\n\n\t/**\n\t * Pokemon Weight\n\t */\n\tpublic weight?: string\n\n\t/**\n\t * Pokemon Description\n\t */\n\tpublic description?: string\n\n\t/**\n\t * Level of the Pokemon\n\t *\n\t * NOTE: can be equal to 'X' when the pokemon is a LEVEL-UP one\n\t */\n\tpublic level?: number | string\n\n\t/**\n\t * Pokemon Stage\n\t *\n\t * - Basic https://www.tcgdex.net/database/xy/xy9/1\n\t * - BREAK https://www.tcgdex.net/database/xy/xy9/18\n\t * - LEVEL-UP https://www.tcgdex.net/database/dp/dp1/121\n\t * - MEGA https://www.tcgdex.net/database/xy/xy1/2\n\t * - RESTORED https://www.tcgdex.net/database/bw/bw5/53\n\t * - Stage1 https://www.tcgdex.net/database/xy/xy9/2\n\t * - Stage2 https://www.tcgdex.net/database/xy/xy9/3\n\t * - VMAX https://www.tcgdex.net/database/swsh/swsh1/50\n\t */\n\tpublic stage?: string\n\n\t/**\n\t * Card Suffix\n\t *\n\t * - EX https://www.tcgdex.net/database/ex/ex2/94\n\t * - GX https://www.tcgdex.net/database/sm/sm12/4\n\t * - V https://www.tcgdex.net/database/swsh/swsh1/1\n\t * - Legend https://www.tcgdex.net/database/hgss/hgss1/114\n\t * - Prime https://www.tcgdex.net/database/hgss/hgss2/85\n\t * - SP https://www.tcgdex.net/database/pl/pl1/7\n\t * - TAG TEAM-GX https://www.tcgdex.net/database/sm/sm12/226\n\t */\n\tpublic suffix?: string\n\n\t/**\n\t * Pokemon Held Item\n\t *\n\t * ex https://www.tcgdex.net/database/dp/dp2/75\n\t */\n\tpublic item?: {\n\t\tname: string\n\t\teffect: string\n\t}\n\n\t/**\n\t * Pokemon Abilities\n\t *\n\t * multi abilities ex https://www.tcgdex.net/database/ex/ex15/10\n\t */\n\tpublic abilities?: Array<{\n\t\ttype: string\n\t\tname: string\n\t\teffect: string\n\t}>\n\n\t/**\n\t * Pokemon Attacks\n\t */\n\tpublic attacks?: Array<{\n\t\tcost?: Array<string>\n\t\tname: string\n\t\teffect?: string\n\t\tdamage?: string | number\n\t}>\n\n\t/**\n\t * Pokemon Weaknesses\n\t */\n\tpublic weaknesses?: Array<{\n\t\ttype: string\n\t\tvalue?: string\n\t}>\n\n\tpublic resistances?: Array<{\n\t\ttype: string\n\t\tvalue?: string\n\t}>\n\n\tpublic retreat?: number\n\n\t// Trainer/Energy\n\tpublic effect?: string\n\n\t// Trainer Only\n\tpublic trainerType?: string\n\n\t// Energy Only\n\tpublic energyType?: string\n\n\t/**\n\t * Define the rotation mark on cards >= Sword & Shield\n\t */\n\tpublic regulationMark?: string\n\n\t/**\n\t * Card ability to be played in official tournaments\n\t *\n\t * Note: all cards are avaialable to play in unlimited tournaments\n\t */\n\tpublic legal!: {\n\n\t\t/**\n\t\t * Ability to play in standard tournaments\n\t\t */\n\t\tstandard: boolean\n\n\t\t/**\n\t\t * Ability to play in expanded tournaments\n\t\t */\n\t\texpanded: boolean\n\t}\n\n\tpublic override async getCard(): Promise<Card> {\n\t\treturn this\n\t}\n\n\tpublic async getSet(): Promise<TCGdexSet> {\n\t\treturn (await this.sdk.set.get(this.set.id))!\n\t}\n}\n","import type { Extension } from '../interfaces'\nimport Model from './Model'\nimport type Serie from './Serie'\n\nexport default class SerieResume extends Model {\n\tpublic id!: string\n\tpublic name!: string\n\tpublic logo?: string\n\n\t/**\n\t * the the Card Image full URL\n\t *\n\t * @param {Quality} quality the quality you want your image to be in\n\t * @param {Extension} extension extension you want you image to be\n\t * @return the full card URL\n\t */\n\tpublic getImageURL(extension: Extension = 'png'): string {\n\t\treturn `${this.logo}.${extension}`\n\t}\n\n\tpublic async getSerie(): Promise<Serie> {\n\t\treturn (await this.sdk.serie.get(this.id))!\n\t}\n}\n","import Model from './Model'\nimport type TCGdexSet from './Set'\n\nexport default class SetResume extends Model {\n\tpublic id!: string\n\tpublic name!: string\n\tpublic logo?: string\n\tpublic symbol?: string\n\tpublic cardCount!: {\n\n\t\t/**\n\t\t * total of number of cards\n\t\t */\n\t\ttotal: number\n\n\t\t/**\n\t\t  * number of cards officialy (on the bottom of each cards)\n\t\t  */\n\t\tofficial: number\n\t}\n\n\tpublic async getSet(): Promise<TCGdexSet> {\n\t\treturn (await this.sdk.set.get(this.id))!\n\t}\n}\n","import { objectLoop } from '@dzeio/object-util'\nimport Model from './Model'\nimport SerieResume from './SerieResume'\nimport SetResume from './SetResume'\n\nexport default class Serie extends SerieResume {\n\tpublic sets!: Array<SetResume>\n\n\tprotected fill(obj: object): void {\n\t\tobjectLoop(obj, (value, key) => {\n\t\t\tswitch (key) {\n\t\t\t\tcase 'sets':\n\t\t\t\t\tthis.sets = (value as Array<any>).map((it) => Model.build(new SetResume(this.sdk), it))\n\t\t\t\t\tbreak\n\t\t\t\tdefault:\n\t\t\t\t\tthis[key] = value\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t})\n\t}\n}\n","import { objectLoop } from '@dzeio/object-util'\nimport CardResume from './CardResume'\nimport Model from './Model'\nimport type { Variants } from './Other'\nimport type SerieResume from './SerieResume'\n\n// biome-ignore lint/suspicious/noShadowRestrictedNames: <explanation>\nexport default class Set extends Model {\n\tpublic id!: string\n\tpublic name!: string\n\tpublic logo?: string\n\tpublic symbol?: string\n\tpublic serie!: SerieResume\n\tpublic tcgOnline?: string\n\tpublic variants?: Variants\n\n\tpublic releaseDate!: string\n\n\t/**\n\t * Designate if the set is usable in tournaments\n\t *\n\t * Note: this is specific to the set and if a\n\t * card is banned from the set it will still be true\n\t */\n\tpublic legal!: {\n\n\t\t/**\n\t\t * Ability to play in standard tournaments\n\t\t */\n\t\tstandard: boolean\n\n\t\t/**\n\t\t * Ability to play in expanded tournaments\n\t\t */\n\t\texpanded: boolean\n\t}\n\n\tpublic cardCount!: {\n\n\t\t/**\n\t\t * total of number of cards\n\t\t */\n\t\ttotal: number\n\n\t\t/**\n\t\t * number of cards officialy (on the bottom of each cards)\n\t\t */\n\t\tofficial: number\n\n\t\t/**\n\t\t * number of cards having a normal version\n\t\t */\n\t\tnormal: number\n\n\t\t/**\n\t\t * number of cards having an reverse version\n\t\t */\n\t\treverse: number\n\n\t\t/**\n\t\t * number of cards having an holo version\n\t\t */\n\t\tholo: number\n\n\t\t/**\n\t\t * Number of possible cards\n\t\t */\n\t\tfirstEd?: number\n\t}\n\n\tpublic cards!: Array<CardResume>\n\n\tpublic async getSerie() {\n\t\treturn this.sdk.serie.get(this.serie.id)\n\t}\n\n\tprotected fill(obj: object): void {\n\t\tobjectLoop(obj, (value, key) => {\n\t\t\tswitch (key) {\n\t\t\t\tcase 'cards':\n\t\t\t\t\tthis.cards = (value as Array<any>).map((it) => Model.build(new CardResume(this.sdk), it))\n\t\t\t\t\tbreak\n\t\t\t\tdefault:\n\t\t\t\t\tthis[key] = value\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t})\n\t}\n}\n","import { objectLoop } from '@dzeio/object-util'\nimport CardResume from './CardResume'\nimport Model from './Model'\n\nexport default class StringEndpoint extends Model {\n\tpublic name!: string\n\tpublic cards!: Array<CardResume>\n\n\tprotected fill(obj: object): void {\n\t\tobjectLoop(obj, (value, key) => {\n\t\t\tswitch (key) {\n\t\t\t\tcase 'cards':\n\t\t\t\t\tthis.cards = (value as Array<any>).map((it) => Model.build(new CardResume(this.sdk), it))\n\t\t\t\t\tbreak\n\t\t\t\tdefault:\n\t\t\t\t\tthis[key] = value\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t})\n\t}\n}\n","import type { Endpoints } from './interfaces'\n\n/**\n * detect the current running context ofthe program\n */\nexport function detectContext(): 'browser' | 'server' {\n\ttry {\n\t\tconst isBrowser = !!window\n\t\treturn isBrowser ? 'browser' : 'server'\n\t} catch {\n\t\treturn 'server'\n\t}\n}\n\nexport const ENDPOINTS: ReadonlyArray<Endpoints> = [\n\t'cards', 'categories', 'dex-ids', 'energy-types',\n\t'hp', 'illustrators', 'rarities', 'regulation-marks',\n\t'retreats', 'series', 'sets', 'stages', 'suffixes',\n\t'trainer-types', 'types', 'variants', 'random'\n] as const\n","export const version = '2.6.0'","import type CacheInterface from '@cachex/core'\nimport MemoryCache from '@cachex/memory'\nimport LocalStorageCache from '@cachex/web-storage'\nimport Query from './Query'\nimport Endpoint from './endpoints/Endpoint'\nimport SimpleEndpoint from './endpoints/SimpleEndpoint'\nimport type {\n\tCard,\n\tCardResume,\n\tEndpoints,\n\tSerie,\n\tSerieList,\n\tSetList,\n\tStringEndpoint,\n\tSupportedLanguages,\n\tSet as TCGdexSet\n} from './interfaces'\nimport CardModel from './models/Card'\nimport CardResumeModel from './models/CardResume'\nimport Model from './models/Model'\nimport SerieModel from './models/Serie'\nimport SerieResume from './models/SerieResume'\nimport SetModel from './models/Set'\nimport SetResumeModel from './models/SetResume'\nimport StringEndpointModel from './models/StringEndpoint'\nimport { ENDPOINTS, detectContext } from './utils'\nimport { version } from './version'\n\nexport default class TCGdex {\n\n\t/**\n\t * How the remote data is going to be fetched\n\t */\n\tpublic static fetch: typeof fetch = fetch\n\n\t/**\n\t * @deprecated to change the lang use {@link TCGdex.getLang} and {@link TCGdex.setLang}\n\t */\n\tpublic static defaultLang: SupportedLanguages = 'en'\n\n\t/**\n\t * the previously hidden caching system used by TCGdex to not kill the API\n\t */\n\tpublic cache: CacheInterface =\n\t\tdetectContext() === 'browser' ? new LocalStorageCache('tcgdex-cache') : new MemoryCache()\n\n\t/**\n\t * the default cache TTL, only subsequent requests will have their ttl changed\n\t */\n\tpublic cacheTTL = 60 * 60\n\n\t// random card/set/serie endpoints\n\tpublic readonly random = {\n\t\tcard: async (): Promise<CardModel> => {\n\t\t\tconst res = await this.fetch('random', 'card')\n\t\t\treturn Model.build(new CardModel(this), res)\n\t\t},\n\t\tset: async (): Promise<SetModel> => {\n\t\t\tconst res = await this.fetch('random', 'set')\n\t\t\treturn Model.build(new SetModel(this), res)\n\t\t},\n\t\tserie: async (): Promise<SerieModel> => {\n\t\t\tconst res = await this.fetch('random', 'serie')\n\t\t\treturn Model.build(new SerieModel(this), res)\n\t\t}\n\t}\n\n\tpublic readonly card = new Endpoint(this, CardModel, CardResumeModel, 'cards')\n\tpublic readonly set = new Endpoint(this, SetModel, SetResumeModel, 'sets')\n\tpublic readonly serie = new Endpoint(this, SerieModel, SerieResume, 'series')\n\n\tpublic readonly type = new SimpleEndpoint(this, StringEndpointModel, 'types')\n\tpublic readonly retreat = new SimpleEndpoint(this, StringEndpointModel, 'retreats')\n\tpublic readonly rarity = new SimpleEndpoint(this, StringEndpointModel, 'rarities')\n\tpublic readonly illustrator = new SimpleEndpoint(this, StringEndpointModel, 'illustrators')\n\tpublic readonly hp = new SimpleEndpoint(this, StringEndpointModel, 'hp')\n\tpublic readonly categorie = new SimpleEndpoint(this, StringEndpointModel, 'categories')\n\tpublic readonly dexID = new SimpleEndpoint(this, StringEndpointModel, 'dex-ids')\n\tpublic readonly energyType = new SimpleEndpoint(this, StringEndpointModel, 'energy-types')\n\tpublic readonly regulationMark = new SimpleEndpoint(this, StringEndpointModel, 'regulation-marks')\n\tpublic readonly stage = new SimpleEndpoint(this, StringEndpointModel, 'stages')\n\tpublic readonly suffixe = new SimpleEndpoint(this, StringEndpointModel, 'suffixes')\n\tpublic readonly trainerType = new SimpleEndpoint(this, StringEndpointModel, 'trainer-types')\n\tpublic readonly variant = new SimpleEndpoint(this, StringEndpointModel, 'variants')\n\n\tprivate lang: SupportedLanguages = 'en'\n\tprivate endpointURL = 'https://api.tcgdex.net/v2'\n\n\tpublic constructor(lang: SupportedLanguages = 'en') {\n\t\tthis.setLang(lang)\n\t}\n\n\t/**\n\t * @deprecated use the constructor parameter or {@link TCGdex.setLang} when in an instance\n\t */\n\tpublic static setDefaultLang(lang: SupportedLanguages) {\n\t\tTCGdex.defaultLang = lang\n\t}\n\n\t/**\n\t * @deprecated use {@link TCGdex.setLang} when in an instance\n\t */\n\tpublic static getDefaultLang(): SupportedLanguages {\n\t\treturn TCGdex.defaultLang\n\t}\n\n\t/**\n\t * the endpoint URL\n\t * ex: `https://api.tcgdex.net/v2`\n\t * @param endpoint the url\n\t */\n\tpublic setEndpoint(endpoint: string) {\n\t\tthis.endpointURL = endpoint\n\t}\n\tpublic getEndpoint(): string {\n\t\treturn this.endpointURL\n\t}\n\n\t/**\n\t * set the current cache methodology\n\t * @param cache the cache to use\n\t */\n\tpublic setCache(cache: CacheInterface) {\n\t\tthis.cache = cache\n\t}\n\n\t/**\n\t * get the current cache methodology\n\t * @param cache the cache to use\n\t */\n\tpublic getCache(): CacheInterface {\n\t\treturn this.cache\n\t}\n\n\t/**\n\t * the endpoint URL\n\t * ex: `https://api.tcgdex.net/v2`\n\t * @param endpoint the url\n\t */\n\tpublic setCacheTTL(seconds: number) {\n\t\tthis.cacheTTL = seconds\n\t}\n\t/**\n\t * get the current useed cache ttl in seconds\n\t * @returns the cache ttl in seconds\n\t */\n\tpublic getCacheTTL(): number {\n\t\treturn this.cacheTTL\n\t}\n\n\tpublic getLang(): SupportedLanguages {\n\t\treturn this.lang ?? TCGdex.defaultLang ?? 'en'\n\t}\n\n\tpublic setLang(lang: SupportedLanguages) {\n\t\tthis.lang = lang\n\t}\n\n\t/**\n\t * Shortcut to easily fetch a card using both it's global id and it's local ID\n\t * @param id the card global/local ID\n\t * @param set the card set name/ID (optionnal)\n\t * @returns the card object\n\t */\n\tpublic async fetchCard(id: string | number, set?: string): Promise<Card | undefined> {\n\t\tconst path = set ? ['sets', set] : ['cards']\n\t\t// @ts-expect-error the base endpoint is 'sets' or 'cards'\n\t\treturn this.fetch(...path, id)\n\t}\n\n\t/**\n\t * Shortcut to easily fetch cards using an optionnal set name/ID\n\t * @param set the card set name/ID (optionnal)\n\t * @returns a card list\n\t */\n\tpublic async fetchCards(set?: string): Promise<Array<CardResume> | undefined> {\n\t\tif (set) {\n\t\t\tconst fSet = await this.fetch('sets', set)\n\t\t\treturn fSet ? fSet.cards : undefined\n\t\t}\n\t\treturn this.fetch('cards')\n\t}\n\n\t/**\n\t * @deprecated use `this.fetch('sets', set)`\n\t */\n\tpublic async fetchSet(set: string): Promise<TCGdexSet | undefined> {\n\t\treturn this.fetch('sets', set)\n\t}\n\n\t/**\n\t * @deprecated use `this.fetch('series', serie)`\n\t */\n\tpublic async fetchSerie(serie: string): Promise<Serie | undefined> {\n\t\treturn this.fetch('series', serie)\n\t}\n\n\t/**\n\t * @deprecated use `this.fetch('series')`\n\t */\n\tpublic async fetchSeries(): Promise<SerieList | undefined> {\n\t\treturn this.fetch('series')\n\t}\n\n\t/**\n\t * Shortcut to easily fetch sets using an optionnal serie name/ID\n\t * @param serie the card set name/ID (optionnal)\n\t * @returns a card list\n\t */\n\tpublic async fetchSets(serie?: string): Promise<SetList | undefined> {\n\t\tif (serie) {\n\t\t\tconst fSerie = await this.fetch('series', serie)\n\t\t\treturn fSerie ? fSerie.sets : undefined\n\t\t}\n\t\treturn this.fetch('sets')\n\t}\n\n\t/**\n\t * Fetch a card using its global id\n\t * @param endpoint_0 'cards'\n\t * @param endpoint_1 {string} the card global ID\n\t */\n\tpublic async fetch(...type: ['cards', string]): Promise<Card | undefined>\n\n\t/**\n\t * Fetch every cards in the database\n\t * @param endpoint_0 'cards'\n\t */\n\tpublic async fetch(type: 'cards'): Promise<Array<CardResume> | undefined>\n\n\t/**\n\t * Fetch a card using its local id and its set\n\t * @param endpoint_0 'sets'\n\t * @param endpoint_1 {string} the set name or ID\n\t * @param endpoint_2 {string} the card local ID\n\t */\n\tpublic async fetch(...endpoint: ['sets', string, string]): Promise<Card | undefined>\n\n\t/**\n\t * Fetch a set\n\t * @param endpoint_0 'sets'\n\t * @param endpoint_1 {string} the set name or ID\n\t */\n\tpublic async fetch(...endpoint: ['sets', string]): Promise<TCGdexSet | undefined>\n\n\t/**\n\t * Fetch a random element\n\t * @param endpoint_0 'random'\n\t * @param endpoint_1 {'set' | 'card' | 'serie'} the type of random element you want to get\n\t */\n\tpublic async fetch(...endpoint: ['random', 'set' | 'card' | 'serie']): Promise<Card | TCGdexSet | Serie | undefined>\n\n\t/**\n\t * Fetch every sets\n\t * @param endpoint_0 'sets'\n\t */\n\tpublic async fetch(endpoint: 'sets'): Promise<SetList | undefined>\n\n\t/**\n\t * Fetch a serie\n\t * @param endpoint_0 'series'\n\t * @param endpoint_1 {string} the serie name or ID\n\t */\n\tpublic async fetch(...endpoint: ['series', string]): Promise<Serie | undefined>\n\n\t/**\n\t * Fetch every series\n\t * @param endpoint_0 'series'\n\t */\n\tpublic async fetch(endpoint: 'series'): Promise<SerieList | undefined>\n\n\t/**\n\t * Fetch cards depending on a specific filter\n\t * @param endpoint_0 {'categories' | 'dex-ids' | 'energy-types' | 'hp' | 'illustrators' | 'rarities' | 'regulation-marks' | 'retreats' | 'stages' | 'suffixes' | 'trainer-types' | 'types' | 'variants'}\n\t * Possible value 'categories' | 'dex-ids' | 'energy-types' | 'hp' | 'illustrators' | 'rarities' | 'regulation-marks' | 'retreats' | 'stages' | 'suffixes' | 'trainer-types' | 'types' | 'variants'\n\t * @param endpoint_1 {string} the value set while fetching the index\n\t */\n\tpublic async fetch(...endpoint: ['categories' | 'dex-ids' | 'energy-types' | 'hp' | 'illustrators' | 'rarities' | 'regulation-marks' | 'retreats' | 'stages' | 'suffixes' | 'trainer-types' | 'types' | 'variants', string]): Promise<StringEndpoint | undefined>\n\n\t/**\n\t * Fetch cards depending on a specific filter\n\t * @param endpoint_0 {'categories' | 'dex-ids' | 'energy-types' | 'hp' | 'illustrators' | 'rarities' | 'regulation-marks' | 'retreats' | 'stages' | 'suffixes' | 'trainer-types' | 'types' | 'variants'}\n\t * Possible value 'categories' | 'dex-ids' | 'energy-types' | 'hp' | 'illustrators' | 'rarities' | 'regulation-marks' | 'retreats' | 'stages' | 'suffixes' | 'trainer-types' | 'types' | 'variants'\n\t * @param endpoint_1 {string} Fetch the possible values to use depending on the endpoint\n\t */\n\tpublic async fetch(endpoint: 'categories' | 'dex-ids' | 'energy-types' | 'hp' | 'illustrators' | 'rarities' | 'regulation-marks' | 'retreats' | 'stages' | 'suffixes' | 'trainer-types' | 'types' | 'variants'): Promise<Array<string> | undefined>\n\n\t/**\n\t * Fetch The differents endpoints depending on the first argument\n\t * @param endpoint_0 {'hp' | 'retreats' | 'categories' | 'illustrators' | 'rarities' | 'types'}\n\t * Possible value 'cards' | 'categories' | 'hp' | 'illustrators' | 'rarities' | 'retreats' | 'series' | 'sets' | 'types'\n\t * @param endpoint_1 {string} (Optionnal) some details to go from the index file to the item file (mostly the ID/name)\n\t * @param endpoint_2 {string} (Optionnal) only for sets the card local ID to fetch the card through the set\n\t */\n\tpublic async fetch<T = object>(...endpoint: Array<Endpoints | string>): Promise<T | undefined> {\n\t\tif (endpoint.length === 0) {\n\t\t\tthrow new Error('endpoint to fetch is empty!')\n\t\t}\n\t\t// @ts-expect-error with the precedent check, we KNOW that type is not empty\n\t\tconst baseEndpoint = endpoint.shift().toLowerCase() as Endpoint\n\t\tif (!ENDPOINTS.includes(baseEndpoint)) {\n\t\t\tthrow new Error(`unknown endpoint to fetch! (${baseEndpoint})`)\n\t\t}\n\t\treturn this.actualFetch<T>(this.getFullURL([baseEndpoint, ...endpoint]))\n\t}\n\n\t/**\n\t * @param endpoint the endpoint to fetch\n\t * @param query the query\n\t */\n\tpublic async fetchWithQuery<T = object>(\n\t\tendpoint: [Endpoints, ...Array<string>],\n\t\tquery?: Array<{ key: string, value: string | number | boolean }>\n\t): Promise<T | undefined> {\n\t\tif (endpoint.length === 0) {\n\t\t\tthrow new Error('endpoint to fetch is empty!')\n\t\t}\n\t\tconst baseEndpoint = endpoint[0].toLowerCase() as Endpoints\n\t\tif (!ENDPOINTS.includes(baseEndpoint)) {\n\t\t\tthrow new Error(`unknown endpoint to fetch! (${baseEndpoint})`)\n\t\t}\n\t\treturn this.actualFetch<T>(this.getFullURL(endpoint, query))\n\t}\n\n\t/**\n\t * format the final URL\n\t */\n\tprivate getFullURL(\n\t\turl: Array<string | number>,\n\t\tsearchParams?: Array<{ key: string, value: string | number | boolean }>\n\t): string {\n\t\t// Normalize path\n\t\tlet path = url.map(this.encode).join('/')\n\n\t\t// handle the Search Params\n\t\tif (searchParams) {\n\t\t\tpath += '?' + searchParams.map((it) => `${this.encode(it.key)}=${this.encode(it.value)}`).join('&')\n\t\t}\n\n\t\t// return with the endpoint and all the shit\n\t\treturn `${this.getEndpoint()}/${this.getLang()}/${path}`\n\t}\n\n\tprivate async actualFetch<T = object>(path: string): Promise<T | undefined> {\n\t\t// get and return the cached value if available\n\t\tconst cached = this.cache.get(path)\n\t\tif (cached) {\n\t\t\treturn cached as T\n\t\t}\n\n\t\t// the actual Fetch :D\n\t\tconst resp = await TCGdex.fetch(path, {\n\t\t\theaders: {\n\t\t\t\t'user-agent': `@tcgdex/javascript-sdk/${version}`\n\t\t\t}\n\t\t})\n\n\t\t// throw if a server-side error is occured\n\t\tif (resp.status >= 500) {\n\t\t\ttry {\n\t\t\t\tconst json = JSON.stringify(await resp.json())\n\t\t\t\tthrow new Error(json)\n\t\t\t} catch {\n\t\t\t\tthrow new Error('TCGdex Server responded with an invalid error :(')\n\t\t\t}\n\t\t}\n\n\t\t// response is not valid :O\n\t\tif (resp.status !== 200) {\n\t\t\treturn undefined\n\t\t}\n\n\t\t// parse, put to cache and return\n\t\tconst json = await resp.json()\n\n\t\tthis.cache.set(path, json, this.cacheTTL)\n\t\treturn json as T\n\t}\n\n\t/**\n\t * encode a string to be used in an url\n\t * @param str the string to encode to URL\n\t * @returns the encoded string\n\t */\n\tprivate encode(str: string | number | boolean): string {\n\t\treturn encodeURI(\n\t\t\tstr\n\t\t\t\t// Transform numbers to string\n\t\t\t\t.toString()\n\t\t\t\t// replace this special character with an escaped one\n\t\t\t\t.replace('?', '%3F')\n\t\t\t\t// normalize the string\n\t\t\t\t.normalize('NFC')\n\t\t\t\t// remove some special chars\n\t\t\t\t// eslint-disable-next-line no-misleading-character-class\n\t\t\t\t.replace(/[\"'\\u0300-\\u036f]/gu, '')\n\t\t)\n\t}\n}\n\n// export the old interfaces\nexport type * from './interfaces.d.ts'\n\n// export the new models items and the Query\nexport {\n\tCardModel, CardResumeModel, Endpoint, Model, Query, SerieModel,\n\tSerieResume as SerieResumeModel,\n\tSetModel,\n\tSetResumeModel, SimpleEndpoint\n}\n"],"mappings":"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","names":["json"]}